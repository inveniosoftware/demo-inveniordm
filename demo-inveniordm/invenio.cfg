"""
InvenioRDM settings for InvenioRDM Demo Site project.

This file was automatically generated by 'invenio-cli init'.

For the full list of settings and their values, see
https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html
and the config.py files of your installed modules
https://invenio.readthedocs.io/en/latest/general/bundles.html

Only configuration created via cookiecutter or very likely to be edited
by installer are included here.
"""

import os
from invenio_oauthclient.contrib.keycloak import KeycloakSettingsHelper
from invenio_oauthclient.contrib.orcid import ORCIDOAuthSettingsHelper

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY="CHANGE_ME"
# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '127.0.0.1']


# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/
SQLALCHEMY_DATABASE_URI="postgresql+psycopg2://demo-inveniordm:demo-inveniordm@localhost/demo-inveniordm"


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': True,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': True,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://pythonhosted.org/Flask-Babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'en'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'Europe/Zurich'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
# I18N_LANGUAGES = [
#     ('fr', _('French'))
# ]

# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Frontpage title
THEME_FRONTPAGE_TITLE = "Welcome to InvenioRDM's Sandbox!"
# Frontpage template
THEME_FRONTPAGE_TEMPLATE = 'demo_inveniordm/demo_frontpage.html'
# Header logo
THEME_LOGO="images/invenio-rdm.svg"
# Site tracking code template for matomo analytics
# Enable the below on the dedicated environment
# THEME_TRACKINGCODE_TEMPLATE = "demo_inveniordm/trackingcode-prod.html"


# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'

# For invenio-vocabularies
JSONSCHEMAS_HOST = "localhost"

# admin user password
RDM_RECORDS_USER_FIXTURE_PASSWORDS = {
    'admin@inveniosoftware.org': '123456'
}

# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

SITE_UI_URL = "https://127.0.0.1"

SITE_API_URL = "https://127.0.0.1/api"


# Invenio-RDM-Records
# ===================
# See https://github.com/inveniosoftware/invenio-rdm-records/blob/master/invenio_rdm_records/config.py
DATACITE_ENABLED = True
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = "10.1234"
DATACITE_TEST_MODE = True

# Invenio-OAuthclient
# ===================
_keycloak_helper = KeycloakSettingsHelper(
    title="CERN",
    description="CERN SSO authentication",
    base_url="https://auth.cern.ch/",
    realm="cern",
    app_key="CERN_APP_CREDENTIALS"
)
OAUTHCLIENT_CERN_REALM_URL = _keycloak_helper.realm_url
OAUTHCLIENT_CERN_USER_INFO_URL = _keycloak_helper.user_info_url
OAUTHCLIENT_CERN_VERIFY_EXP = True
OAUTHCLIENT_CERN_VERIFY_AUD = False

_orcid_sandbox_app = ORCIDOAuthSettingsHelper(
    title="ORCID (Sandbox)",
    description="ORCID (Sandbox) - Connecting Research and Researchers.",
    base_url='https://pub.sandbox.orcid.org/',
    access_token_url='https://sandbox.orcid.org/oauth/token',
    authorize_url='https://sandbox.orcid.org/oauth/authorize#show_login',
)

OAUTHCLIENT_REMOTE_APPS = {
    "cern": _keycloak_helper.remote_app,
    "orcid": _orcid_sandbox_app.remote_app,
}

# secrets will be injected on deployment
CERN_APP_CREDENTIALS = {
    "consumer_key": "CHANGE ME",
    "consumer_secret": "CHANGE ME",
}
ORCID_APP_CREDENTIALS = {
    "consumer_key": "CHANGE ME",
    "consumer_secret": "CHANGE ME",
}


OAISERVER_ID_PREFIX = "inveniordm.web.cern.ch"

#
# Invenio-Search
#

SEARCH_INDEX_PREFIX = "demo-inveniordm-"


# Custom Fields
# =============

from invenio_i18n import lazy_gettext as _
from invenio_records_resources.services.custom_fields import (
    BaseCF,
    BooleanCF,
    DoubleCF,
    EDTFDateStringCF,
    IntegerCF,
    ISODateStringCF,
    KeywordCF,
    TextCF,
)
from invenio_records_resources.services.records.facets import CFTermsFacet
from invenio_rdm_records.config import RDM_FACETS, RDM_SEARCH
from invenio_rdm_records.services.schemas.metadata import _valid_url
from invenio_vocabularies.services.custom_fields import VocabularyCF
from invenio_vocabularies.services.facets import VocabularyLabels
from marshmallow_utils.fields.edtfdatestring import EDTFValidator
from marshmallow import ValidationError

#
# Namespaces
#

RDM_NAMESPACES = {
    "rdm": "https://inveniordm.docs.cern.ch"
}

#
# Records custom fields
#

def _validate_release_year(value):
    """Accept only edtf year values i.e YYYY."""
    _validate = EDTFValidator()
    _value = _validate(value)
    if not _value.isdigit():
        raise ValidationError("Please provide a valid year.", field_name="release_year")

RDM_CUSTOM_FIELDS = [
    TextCF(
        name="rdm:repository_url",
        field_args={"validate": _valid_url(_("Not a valid URL."))},
    ),
    VocabularyCF(
        name="rdm:development_status",
        vocabulary_id="developmentstatus",
        dump_options=True,
        multiple=False,
    ),
    VocabularyCF(
        name="rdm:programming_languages",
        vocabulary_id="programminglanguages",
        dump_options=True,
        multiple=True
    ),
    EDTFDateStringCF(
        name="rdm:release_year",
        field_args={"validate": _validate_release_year}
    ),
    ISODateStringCF(name="rdm:release_date"),
    TextCF(name="rdm:release_notes"),
    IntegerCF(name="rdm:release_number_of_lines"),
    DoubleCF(name="rdm:release_test_percentage"),
    BooleanCF(name="rdm:lts_release")
]

RDM_CUSTOM_FIELDS_UI = [
    {
        "section": _("Software"),
        "fields": [
            dict(
                field="rdm:repository_url",
                ui_widget="Input",
                props=dict(
                    label="Repository URL",
                    placeholder="https://your.repository.url",
                    icon="linkify",
                    description="URL of the repository where the software is hosted.",
                )
            ),
            dict(
                field="rdm:development_status",
                ui_widget="Dropdown",  # predefined widget
                props=dict(
                    label="Development Status",
                    placeholder="Concept, WIP, Active...",
                    icon="group",
                    description="Find more at repostatus.org",
                    search=False,
                    multiple=False,
                    clearable=True
                )
            ),
            dict(
                field="rdm:programming_languages",
                ui_widget="AutocompleteDropdown",  # predefined widget
                props=dict(
                    label="Programming Languages",
                    placeholder="Type a programming language...",
                    icon="language",
                    description="List of programming fields used in this project.",
                    autocompleteFrom="/api/vocabularies/programminglanguages",
                    clearable=True,
                    multiple=True,
                )
            ),
            dict(
                field="rdm:release_year",
                ui_widget="Input",
                props=dict(
                    label="Release Year",
                    placeholder="Release year (EDTF date of format YYYY).",
                    icon="calendar",
                    description="Format: DATE where DATE is YYYY.",
                )
            ),
            dict(
                field="rdm:release_date",
                ui_widget="Input",
                props=dict(
                    label="Release Date",
                    placeholder="Release date in ISO format (YYYY-MM-DD).",
                    icon="calendar",
                    description="Format: YYYY-MM-DD.",
                )
            ),
            dict(
                field="rdm:release_notes",
                ui_widget="RichInput",
                props=dict(
                    label="Release Notes",
                    placeholder="Added new feature X...",
                    icon="book",
                    description="Changes made in the release.",
                )
            ),
             dict(
                field="rdm:release_number_of_lines",
                ui_widget="NumberInput",
                props=dict(
                    label="Release number of lines",
                    placeholder="Number of lines in code.",
                    icon="calculator",
                    description="Insert the integer number of code lines changed in this release.",
                )
            ),
            dict(
                field="rdm:release_test_percentage",
                ui_widget="NumberInput",
                props=dict(
                    label="Release test coverage (%)",
                    placeholder="Release test coverage (e.g 95,75).",
                    icon="calculator",
                    description="Format: double number.",
                )
            ),
            dict(
                field="rdm:lts_release",
                ui_widget="BooleanCheckbox",
                props=dict(
                    label="LTS release",
                    trueLabel="Yes",
                    falseLabel="No",
                    icon="tag",
                    description="Mark if this is a Long Term Support release (LTS).",
                )
            )
        ]
    }
]

RDM_FACETS = {
    **RDM_FACETS,
    "development_status": {
        "facet": CFTermsFacet(
            field="rdm:development_status.id",
            label=_("Development Status"),
            value_labels=VocabularyLabels("developmentstatus"),
        ),
        "ui": {
            "field": CFTermsFacet.field("rdm:development_status"),
        },
    },
    "programming_language": {
        "facet": CFTermsFacet(
            field="rdm:programming_languages.id",
            label=_("Programming Languages"),
            value_labels=VocabularyLabels("programminglanguages"),
        ),
        "ui": {
            "field": CFTermsFacet.field("rdm:programming_languages"),
        },
    },
}

RDM_SEARCH = {
    **RDM_SEARCH,
    "facets": RDM_SEARCH["facets"] + ["programming_language", "development_status"]
}


#
# Communities custom fields
#

COMMUNITIES_CUSTOM_FIELDS = [
    TextCF(
        name="rdm:external_url",
        field_args={"validate": _valid_url(_("Not a valid URL."))},
    ),
    TextCF(name="rdm:policy"),
]


COMMUNITIES_CUSTOM_FIELDS_UI = [
    {
        "section": _("Other details"),
        "fields": [
            dict(
                field="rdm:external_url",
                ui_widget="Input",
                props=dict(
                    label="External URL",
                    placeholder="https://your.community.url",
                    icon="linkify",
                    description="External URL of the community...",
                )
            ),
            dict(
                field="rdm:policy",
                ui_widget="RichInput",
                props=dict(
                    label="Policy",
                    placeholder="For a record to be accepted into this community it must...",
                    icon="pencil",
                    description="Conditions for a record to be accepted into the community",
                )
            ),
        ]
    }
]
